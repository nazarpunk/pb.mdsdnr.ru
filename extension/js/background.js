"use strict";
chrome.webRequest.onBeforeRequest.addListener(details => {
    const url = details.url.replace(`https://pb.mdsdnr.ru/`, ``);
    const ext = url.slice((url.lastIndexOf('.') - 1 >>> 0) + 2);
    if ([`css`, `js`, `map`, `png`, `gif`, `jpg`, `jpeg`, `eot`, `woff`, `woff2`, `svg`].includes(ext))
        return { redirectUrl: chrome.extension.getURL(url) };
}, { urls: [`*://pb.mdsdnr.ru/*`] }, [`blocking`]);
{
    const onMessage = (request, sender, sendResponse) => {
        const manifest = chrome.runtime.getManifest();
        if (request.hasOwnProperty(`userClientRemove`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                const body = new FormData();
                body.set('hash', request.userClientRemove);
                body.set('token', result.token);
                fetch(`${manifest.homepage_url}/mindnr.php?user|client_remove`, {
                    method: `post`,
                    body: body
                })
                    .then(r => r.json())
                    .then(data => sendResponse(data))
                    .catch(e => sendResponse({ error: e.message }));
            });
            return true;
        }
        if (request.hasOwnProperty(`setClientSidebar`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                fetch(`${manifest.homepage_url}/mindnr.php?user|updateClientSidebar`, {
                    method: `post`,
                    body: JSON.stringify({
                        client: request.setClientSidebar,
                        sidebar: request.sidebar,
                        token: result.token
                    })
                })
                    .then(r => r.json())
                    .then(data => sendResponse(data))
                    .catch(e => sendResponse({ error: e.message }));
            });
            return true;
        }
        if (request.hasOwnProperty(`getClientSidebar`)) {
            chrome.storage.local.get([`ID`, `clients`], result => {
                const out = {
                    ID: 0,
                    sidebar: []
                };
                if (result.hasOwnProperty(`ID`) && result.hasOwnProperty(`clients`)) {
                    result.clients.some((client) => {
                        if (client.login !== request.getClientSidebar)
                            return false;
                        out.ID = result.ID;
                        out.sidebar = client.sidebar === null ? [] : client.sidebar.split(`,`);
                        return true;
                    });
                }
                sendResponse(out);
            });
            return true;
        }
        if (request.hasOwnProperty(`getManifest`)) {
            sendResponse(manifest);
            return true;
        }
        if (request.hasOwnProperty(`getClients`)) {
            chrome.storage.local.get(['ID', 'clients', 'token'], result => sendResponse(result));
            return true;
        }
        if (request.hasOwnProperty(`updateData`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                fetch(`${manifest.homepage_url}/mindnr.php?user|getData`, {
                    method: `POST`,
                    body: result.token
                })
                    .then(r => r.json())
                    .then(data => {
                    if (data.hasOwnProperty(`error`))
                        return chrome.storage.local.clear();
                    if (data.hasOwnProperty(`ID`))
                        chrome.storage.local.set(data);
                })
                    .catch(e => console.warn(e));
            });
        }
        if (request.hasOwnProperty(`getClientSignature`)) {
            let out = {};
            chrome.storage.local.get([`signature`], result => {
                result.signature.forEach((item) => {
                    if (item.login === request.getClientSignature)
                        out[item.type] = item;
                });
                sendResponse(out);
            });
            return true;
        }
        if (request.hasOwnProperty(`saveClient`)) {
            fetch(`${manifest.homepage_url}/mindnr.php?user|saveClient`, {
                method: `POST`,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(request.saveClient)
            })
                .then(r => r.json())
                .then(data => sendResponse(data))
                .catch(e => sendResponse({ error: e.message }));
            return true;
        }
        if (request.hasOwnProperty(`saveSignature`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                request.saveSignature.token = result.token;
                fetch(`${manifest.homepage_url}/mindnr.php?user|saveSignature`, {
                    method: `POST`,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(request.saveSignature)
                })
                    .then(r => r.json())
                    .then(data => sendResponse(data))
                    .catch(e => sendResponse({ error: e.message }));
                return true;
            });
        }
        if (request.hasOwnProperty(`updateClientName`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                fetch(`${manifest.homepage_url}/mindnr.php?user|updateClientName`, {
                    method: `POST`,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ token: result.token, login: request.login, name: request.updateClientName })
                })
                    .then(r => r.json())
                    .then(data => sendResponse(data))
                    .catch(e => sendResponse({ error: e.message }));
                return true;
            });
        }
        sendResponse({});
        return true;
    };
    chrome.runtime.onMessageExternal.addListener(onMessage);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUN4RCIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy88ZWRpdG9yLWZvbGQgZGVzYz1cIm9vQmVmb3JlUmVxdWVzdFwiPlxuY2hyb21lLndlYlJlcXVlc3Qub25CZWZvcmVSZXF1ZXN0LmFkZExpc3RlbmVyKFxuXHRkZXRhaWxzID0+IHtcblx0XHRjb25zdCB1cmwgPSBkZXRhaWxzLnVybC5yZXBsYWNlKGBodHRwczovL3BiLm1kc2Ruci5ydS9gLCBgYCk7XG5cdFx0Y29uc3QgZXh0ID0gdXJsLnNsaWNlKCh1cmwubGFzdEluZGV4T2YoJy4nKSAtIDEgPj4+IDApICsgMik7XG5cdFx0aWYgKFtgY3NzYCwgYGpzYCwgYG1hcGAsIGBwbmdgLCBgZ2lmYCwgYGpwZ2AsIGBqcGVnYCwgYGVvdGAsIGB3b2ZmYCwgYHdvZmYyYCwgYHN2Z2BdLmluY2x1ZGVzKGV4dCkpIHJldHVybiB7cmVkaXJlY3RVcmw6IGNocm9tZS5leHRlbnNpb24uZ2V0VVJMKHVybCl9O1xuXHR9LFxuXHR7dXJsczogW2AqOi8vcGIubWRzZG5yLnJ1LypgXX0sXG5cdFtgYmxvY2tpbmdgXVxuKTtcbi8vPC9lZGl0b3ItZm9sZD5cblxuLy88ZWRpdG9yLWZvbGQgZGVzYz1cIm9uTWVzc2FnZVwiPlxue1xuXHRjb25zdCBvbk1lc3NhZ2UgPSAocmVxdWVzdDogYW55LCBzZW5kZXI6IGFueSwgc2VuZFJlc3BvbnNlOiBhbnkpID0+IHtcblx0XHRjb25zdCBtYW5pZmVzdDogY2hyb21lLnJ1bnRpbWUuTWFuaWZlc3QgPSBjaHJvbWUucnVudGltZS5nZXRNYW5pZmVzdCgpO1xuXG5cdFx0Ly8gPGVkaXRvci1mb2xkIGRlc2M9XCJ1c2VyQ2xpZW50UmVtb3ZlXCI+XG5cdFx0aWYgKHJlcXVlc3QuaGFzT3duUHJvcGVydHkoYHVzZXJDbGllbnRSZW1vdmVgKSkge1xuXHRcdFx0Y2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFsndG9rZW4nXSwgcmVzdWx0ID0+IHtcblx0XHRcdFx0aWYgKCFyZXN1bHQuaGFzT3duUHJvcGVydHkoYHRva2VuYCkpIHJldHVybjtcblx0XHRcdFx0Y29uc3QgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuXHRcdFx0XHRib2R5LnNldCgnaGFzaCcsIHJlcXVlc3QudXNlckNsaWVudFJlbW92ZSk7XG5cdFx0XHRcdGJvZHkuc2V0KCd0b2tlbicsIHJlc3VsdC50b2tlbik7XG5cblx0XHRcdFx0ZmV0Y2goYCR7bWFuaWZlc3QuaG9tZXBhZ2VfdXJsfS9taW5kbnIucGhwP3VzZXJ8Y2xpZW50X3JlbW92ZWAsIHtcblx0XHRcdFx0XHRtZXRob2Q6IGBwb3N0YCxcblx0XHRcdFx0XHRib2R5ICA6IGJvZHlcblx0XHRcdFx0fSlcblx0XHRcdFx0XHQudGhlbihyID0+IHIuanNvbigpKVxuXHRcdFx0XHRcdC50aGVuKGRhdGEgPT4gc2VuZFJlc3BvbnNlKGRhdGEpKVxuXHRcdFx0XHRcdC5jYXRjaChlID0+IHNlbmRSZXNwb25zZSh7ZXJyb3I6IGUubWVzc2FnZX0pKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdC8vIDwvZWRpdG9yLWZvbGQ+XG5cblx0XHQvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cInNldENsaWVudFNpZGViYXJcIj5cblx0XHRpZiAocmVxdWVzdC5oYXNPd25Qcm9wZXJ0eShgc2V0Q2xpZW50U2lkZWJhcmApKSB7XG5cdFx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoWyd0b2tlbiddLCByZXN1bHQgPT4ge1xuXHRcdFx0XHRpZiAoIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eShgdG9rZW5gKSkgcmV0dXJuO1xuXHRcdFx0XHRmZXRjaChgJHttYW5pZmVzdC5ob21lcGFnZV91cmx9L21pbmRuci5waHA/dXNlcnx1cGRhdGVDbGllbnRTaWRlYmFyYCwge1xuXHRcdFx0XHRcdG1ldGhvZDogYHBvc3RgLFxuXHRcdFx0XHRcdGJvZHkgIDogSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICBjbGllbnQgOiByZXF1ZXN0LnNldENsaWVudFNpZGViYXIsXG5cdFx0XHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgIHNpZGViYXI6IHJlcXVlc3Quc2lkZWJhcixcblx0XHRcdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gIDogcmVzdWx0LnRva2VuXG5cdFx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICB9KVxuXHRcdFx0XHR9KVxuXHRcdFx0XHRcdC50aGVuKHIgPT4gci5qc29uKCkpXG5cdFx0XHRcdFx0LnRoZW4oZGF0YSA9PiBzZW5kUmVzcG9uc2UoZGF0YSkpXG5cdFx0XHRcdFx0LmNhdGNoKGUgPT4gc2VuZFJlc3BvbnNlKHtlcnJvcjogZS5tZXNzYWdlfSkpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0Ly8gPC9lZGl0b3ItZm9sZD5cblxuXHRcdC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiZ2V0Q2xpZW50U2lkZWJhclwiPlxuXHRcdGlmIChyZXF1ZXN0Lmhhc093blByb3BlcnR5KGBnZXRDbGllbnRTaWRlYmFyYCkpIHtcblx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbYElEYCwgYGNsaWVudHNgXSwgcmVzdWx0ID0+IHtcblx0XHRcdFx0Y29uc3Qgb3V0OiB7XG5cdFx0XHRcdFx0SUQ6IG51bWJlcixcblx0XHRcdFx0XHRzaWRlYmFyOiBzdHJpbmdbXVxuXHRcdFx0XHR9ID0ge1xuXHRcdFx0XHRcdElEICAgICA6IDAsXG5cdFx0XHRcdFx0c2lkZWJhcjogW11cblx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eShgSURgKSAmJiByZXN1bHQuaGFzT3duUHJvcGVydHkoYGNsaWVudHNgKSkge1xuXHRcdFx0XHRcdHJlc3VsdC5jbGllbnRzLnNvbWUoKGNsaWVudDoge1xuXHRcdFx0XHRcdFx0bG9naW46IHN0cmluZyxcblx0XHRcdFx0XHRcdHNpZGViYXI6IHN0cmluZ1xuXHRcdFx0XHRcdH0pID0+IHtcblx0XHRcdFx0XHRcdGlmIChjbGllbnQubG9naW4gIT09IHJlcXVlc3QuZ2V0Q2xpZW50U2lkZWJhcikgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0b3V0LklEID0gcmVzdWx0LklEO1xuXHRcdFx0XHRcdFx0b3V0LnNpZGViYXIgPSBjbGllbnQuc2lkZWJhciA9PT0gbnVsbCA/IFtdIDogY2xpZW50LnNpZGViYXIuc3BsaXQoYCxgKTtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbmRSZXNwb25zZShvdXQpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0Ly8gPC9lZGl0b3ItZm9sZD5cblxuXHRcdC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiZ2V0VmVyc2lvblwiPlxuXHRcdGlmIChyZXF1ZXN0Lmhhc093blByb3BlcnR5KGBnZXRNYW5pZmVzdGApKSB7XG5cdFx0XHRzZW5kUmVzcG9uc2UobWFuaWZlc3QpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdC8vIDwvZWRpdG9yLWZvbGQ+XG5cblx0XHQvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cImdldENsaWVudHNcIj5cblx0XHRpZiAocmVxdWVzdC5oYXNPd25Qcm9wZXJ0eShgZ2V0Q2xpZW50c2ApKSB7XG5cdFx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoWydJRCcsICdjbGllbnRzJywgJ3Rva2VuJ10sIHJlc3VsdCA9PiBzZW5kUmVzcG9uc2UocmVzdWx0KSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0Ly8gPC9lZGl0b3ItZm9sZD5cblxuXHRcdC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwidXBkYXRlRGF0YVwiPlxuXHRcdGlmIChyZXF1ZXN0Lmhhc093blByb3BlcnR5KGB1cGRhdGVEYXRhYCkpIHtcblx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ3Rva2VuJ10sIHJlc3VsdCA9PiB7XG5cdFx0XHRcdGlmICghcmVzdWx0Lmhhc093blByb3BlcnR5KGB0b2tlbmApKSByZXR1cm47XG5cdFx0XHRcdGZldGNoKGAke21hbmlmZXN0LmhvbWVwYWdlX3VybH0vbWluZG5yLnBocD91c2VyfGdldERhdGFgLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiBgUE9TVGAsXG5cdFx0XHRcdFx0Ym9keSAgOiByZXN1bHQudG9rZW5cblx0XHRcdFx0fSlcblx0XHRcdFx0XHQudGhlbihyID0+IHIuanNvbigpKVxuXHRcdFx0XHRcdC50aGVuKGRhdGEgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKGRhdGEuaGFzT3duUHJvcGVydHkoYGVycm9yYCkpIHJldHVybiBjaHJvbWUuc3RvcmFnZS5sb2NhbC5jbGVhcigpO1xuXHRcdFx0XHRcdFx0aWYgKGRhdGEuaGFzT3duUHJvcGVydHkoYElEYCkpIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldChkYXRhKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5jYXRjaChlID0+IGNvbnNvbGUud2FybihlKSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gPC9lZGl0b3ItZm9sZD5cblxuXHRcdC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiZ2V0Q2xpZW50U2lnbmF0dXJlXCI+XG5cdFx0aWYgKHJlcXVlc3QuaGFzT3duUHJvcGVydHkoYGdldENsaWVudFNpZ25hdHVyZWApKSB7XG5cdFx0XHRsZXQgb3V0OiB7XG5cdFx0XHRcdFtrZXk6IHN0cmluZ106IHt9XG5cdFx0XHR9ID0ge307XG5cdFx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoW2BzaWduYXR1cmVgXSwgcmVzdWx0ID0+IHtcblx0XHRcdFx0cmVzdWx0LnNpZ25hdHVyZS5mb3JFYWNoKChpdGVtOiB7XG5cdFx0XHRcdFx0bG9naW46IHN0cmluZyxcblx0XHRcdFx0XHR0eXBlOiBzdHJpbmdcblx0XHRcdFx0fSkgPT4ge1xuXHRcdFx0XHRcdGlmIChpdGVtLmxvZ2luID09PSByZXF1ZXN0LmdldENsaWVudFNpZ25hdHVyZSkgb3V0W2l0ZW0udHlwZV0gPSBpdGVtO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0c2VuZFJlc3BvbnNlKG91dCk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHQvLyA8L2VkaXRvci1mb2xkPlxuXG5cdFx0Ly8gPGVkaXRvci1mb2xkIGRlc2M9XCJzYXZlQ2xpZW50XCI+XG5cdFx0aWYgKHJlcXVlc3QuaGFzT3duUHJvcGVydHkoYHNhdmVDbGllbnRgKSkge1xuXHRcdFx0ZmV0Y2goYCR7bWFuaWZlc3QuaG9tZXBhZ2VfdXJsfS9taW5kbnIucGhwP3VzZXJ8c2F2ZUNsaWVudGAsIHtcblx0XHRcdFx0bWV0aG9kIDogYFBPU1RgLFxuXHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0J0FjY2VwdCcgICAgICA6ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0XHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGJvZHkgICA6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3Quc2F2ZUNsaWVudClcblx0XHRcdH0pXG5cdFx0XHRcdC50aGVuKHIgPT4gci5qc29uKCkpXG5cdFx0XHRcdC50aGVuKGRhdGEgPT4gc2VuZFJlc3BvbnNlKGRhdGEpKVxuXHRcdFx0XHQuY2F0Y2goZSA9PiBzZW5kUmVzcG9uc2Uoe2Vycm9yOiBlLm1lc3NhZ2V9KSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0Ly8gPC9lZGl0b3ItZm9sZD5cblxuXHRcdC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwic2F2ZVNpZ25hdHVyZVwiPlxuXHRcdGlmIChyZXF1ZXN0Lmhhc093blByb3BlcnR5KGBzYXZlU2lnbmF0dXJlYCkpIHtcblx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ3Rva2VuJ10sIHJlc3VsdCA9PiB7XG5cdFx0XHRcdGlmICghcmVzdWx0Lmhhc093blByb3BlcnR5KGB0b2tlbmApKSByZXR1cm47XG5cdFx0XHRcdHJlcXVlc3Quc2F2ZVNpZ25hdHVyZS50b2tlbiA9IHJlc3VsdC50b2tlbjtcblx0XHRcdFx0ZmV0Y2goYCR7bWFuaWZlc3QuaG9tZXBhZ2VfdXJsfS9taW5kbnIucGhwP3VzZXJ8c2F2ZVNpZ25hdHVyZWAsIHtcblx0XHRcdFx0XHRtZXRob2QgOiBgUE9TVGAsXG5cdFx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdFx0J0FjY2VwdCcgICAgICA6ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0XHRcdFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGJvZHkgICA6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3Quc2F2ZVNpZ25hdHVyZSlcblx0XHRcdFx0fSlcblx0XHRcdFx0XHQudGhlbihyID0+IHIuanNvbigpKVxuXHRcdFx0XHRcdC50aGVuKGRhdGEgPT4gc2VuZFJlc3BvbnNlKGRhdGEpKVxuXHRcdFx0XHRcdC5jYXRjaChlID0+IHNlbmRSZXNwb25zZSh7ZXJyb3I6IGUubWVzc2FnZX0pKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gPC9lZGl0b3ItZm9sZD5cblxuXHRcdC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwidXBkYXRlQ2xpZW50TmFtZVwiPlxuXHRcdGlmIChyZXF1ZXN0Lmhhc093blByb3BlcnR5KGB1cGRhdGVDbGllbnROYW1lYCkpIHtcblx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ3Rva2VuJ10sIHJlc3VsdCA9PiB7XG5cdFx0XHRcdGlmICghcmVzdWx0Lmhhc093blByb3BlcnR5KGB0b2tlbmApKSByZXR1cm47XG5cdFx0XHRcdGZldGNoKGAke21hbmlmZXN0LmhvbWVwYWdlX3VybH0vbWluZG5yLnBocD91c2VyfHVwZGF0ZUNsaWVudE5hbWVgLCB7XG5cdFx0XHRcdFx0bWV0aG9kIDogYFBPU1RgLFxuXHRcdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHRcdCdBY2NlcHQnICAgICAgOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRib2R5ICAgOiBKU09OLnN0cmluZ2lmeSh7dG9rZW46IHJlc3VsdC50b2tlbiwgbG9naW46IHJlcXVlc3QubG9naW4sIG5hbWU6IHJlcXVlc3QudXBkYXRlQ2xpZW50TmFtZX0pXG5cdFx0XHRcdH0pXG5cdFx0XHRcdFx0LnRoZW4ociA9PiByLmpzb24oKSlcblx0XHRcdFx0XHQudGhlbihkYXRhID0+IHNlbmRSZXNwb25zZShkYXRhKSlcblx0XHRcdFx0XHQuY2F0Y2goZSA9PiBzZW5kUmVzcG9uc2Uoe2Vycm9yOiBlLm1lc3NhZ2V9KSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIDwvZWRpdG9yLWZvbGQ+XG5cblx0XHRzZW5kUmVzcG9uc2Uoe30pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXHRjaHJvbWUucnVudGltZS5vbk1lc3NhZ2VFeHRlcm5hbC5hZGRMaXN0ZW5lcihvbk1lc3NhZ2UpO1xufVxuLy88L2VkaXRvci1mb2xkPiJdfQ==
