"use strict";
chrome.webRequest.onBeforeRequest.addListener(details => {
    const url = details.url.replace(`https://pb.mdsdnr.ru/`, ``);
    const ext = url.slice((url.lastIndexOf('.') - 1 >>> 0) + 2);
    if ([`css`, `js`, `map`, `png`, `gif`, `jpg`, `jpeg`, `eot`, `woff`, `woff2`, `svg`].includes(ext))
        return { redirectUrl: chrome.extension.getURL(url) };
}, { urls: [`*://pb.mdsdnr.ru/*`] }, [`blocking`]);
{
    const onMessage = (request, sender, sendResponse) => {
        const manifest = chrome.runtime.getManifest();
        if (request.hasOwnProperty(`setClientSidebar`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                fetch(`${manifest.homepage_url}/mindnr.php?user|updateClientSidebar`, {
                    method: `post`,
                    body: JSON.stringify({
                        client: request.setClientSidebar,
                        sidebar: request.sidebar,
                        token: result.token
                    })
                })
                    .then(r => r.json())
                    .then(data => sendResponse(data))
                    .catch(e => sendResponse({ error: e.message }));
            });
            return true;
        }
        if (request.hasOwnProperty(`getClientSidebar`)) {
            chrome.storage.local.get([`ID`, `clients`], result => {
                const out = {
                    ID: 0,
                    sidebar: []
                };
                if (result.hasOwnProperty(`ID`) && result.hasOwnProperty(`clients`)) {
                    result.clients.some((client) => {
                        if (client.login !== request.getClientSidebar)
                            return false;
                        out.ID = result.ID;
                        out.sidebar = client.sidebar === null ? [] : client.sidebar.split(`,`);
                        return true;
                    });
                }
                sendResponse(out);
            });
            return true;
        }
        if (request.hasOwnProperty(`getManifest`)) {
            sendResponse(manifest);
            return true;
        }
        if (request.hasOwnProperty(`getClients`)) {
            chrome.storage.local.get(['ID', 'clients', 'token'], result => sendResponse(result));
            return true;
        }
        if (request.hasOwnProperty(`updateData`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                fetch(`${manifest.homepage_url}/mindnr.php?user|getData`, {
                    method: `POST`,
                    body: result.token
                })
                    .then(r => r.json())
                    .then(data => {
                    if (data.hasOwnProperty(`error`))
                        return chrome.storage.local.clear();
                    if (data.hasOwnProperty(`ID`))
                        chrome.storage.local.set(data);
                })
                    .catch(e => console.warn(e));
            });
        }
        if (request.hasOwnProperty(`getClientSignature`)) {
            let out = {};
            chrome.storage.local.get([`signature`], result => {
                result.signature.forEach((item) => {
                    if (item.login === request.getClientSignature)
                        out[item.type] = item;
                });
                sendResponse(out);
            });
            return true;
        }
        if (request.hasOwnProperty(`saveClient`)) {
            fetch(`${manifest.homepage_url}/mindnr.php?user|saveClient`, {
                method: `POST`,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(request.saveClient)
            })
                .then(r => r.json())
                .then(data => sendResponse(data))
                .catch(e => sendResponse({ error: e.message }));
            return true;
        }
        if (request.hasOwnProperty(`saveSignature`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                request.saveSignature.token = result.token;
                fetch(`${manifest.homepage_url}/mindnr.php?user|saveSignature`, {
                    method: `POST`,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(request.saveSignature)
                })
                    .then(r => r.json())
                    .then(data => sendResponse(data))
                    .catch(e => sendResponse({ error: e.message }));
                return true;
            });
        }
        if (request.hasOwnProperty(`updateClientName`)) {
            chrome.storage.local.get(['token'], result => {
                if (!result.hasOwnProperty(`token`))
                    return;
                fetch(`${manifest.homepage_url}/mindnr.php?user|updateClientName`, {
                    method: `POST`,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ token: result.token, login: request.login, name: request.updateClientName })
                })
                    .then(r => r.json())
                    .then(data => sendResponse(data))
                    .catch(e => sendResponse({ error: e.message }));
                return true;
            });
        }
        sendResponse({});
        return true;
    };
    chrome.runtime.onMessageExternal.addListener(onMessage);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
