"use strict";
document.title = `Подписать`;
{
    const $form = document.querySelector(`form`);
    $form.autocomplete = `off`;
    const $password = $form.querySelector(`[type=password]`);
    $password.classList.add(`form-control`);
    const $sec = $form.querySelector(`[type=file]`);
    $sec.accept = `.sec`;
    const $submit = $form.querySelector(`[type=submit]`);
    $submit.classList.add(`btn`, `btn-primary`);
    $form.autocomplete = `off`;
    document.querySelectorAll(`.errorSummary`).forEach($elem => $elem.classList.add(`alert`, `alert-danger`));
    const b64toBlob = (b64Data, contentType = 'application/octet-stream', sliceSize = 512) => {
        let byteCharacters = atob(b64Data);
        let byteArrays = [];
        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            let slice = byteCharacters.slice(offset, offset + sliceSize);
            let byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            let byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, { type: contentType });
    };
    const indexOfSubmit = `window.parent.$.fn.yiiGridView.update`;
    const params = new URLSearchParams(window.location.search);
    if (params.has(`clientId`) && params.has(`type`)) {
        const clientId = params.get(`clientId`);
        const types = JSON.parse(params.get(`type`) || `{}`);
        chrome.runtime.sendMessage(document.head.dataset.extensionId || ``, { getClientSignature: clientId }, (signature) => {
            let typeCurrent = [2, 0, 1].find(type => types[type].need && !types[type].complete);
            if (typeCurrent === undefined)
                return;
            $submit.insertAdjacentHTML('beforebegin', `<label class="switch-wrap"><div class="switch"><input type="checkbox" checked autocomplete="off" name="save"><div><span></span></div></div>Сохранить как &laquo;${types[typeCurrent].name}&raquo;</label>`);
            $form.addEventListener(`submit`, e => {
                const $checkbox = $form.querySelector(`[type=checkbox]`);
                const formData = new FormData($form);
                $submit.disabled = true;
                if ($checkbox === null || !$checkbox.checked || $sec.files.length === 0)
                    return;
                e.preventDefault();
                fetch($form.action, {
                    method: $form.method,
                    body: new FormData($form)
                })
                    .then(response => response.text())
                    .then(data => {
                    const isSubmit = data.indexOf(indexOfSubmit) >= 0;
                    if (!isSubmit)
                        return $form.submit();
                    e.preventDefault();
                    const fileReader = new FileReader();
                    fileReader.onload = e => {
                        chrome.runtime.sendMessage(document.head.dataset.extensionId || ``, {
                            saveSignature: {
                                client: clientId,
                                type: typeCurrent,
                                password: formData.get(`QuickKeysForm[passphrase]`),
                                sec: e.target.result
                            }
                        }, () => {
                            chrome.runtime.sendMessage(document.head.dataset.extensionId || ``, { updateData: true });
                            window.parent.location.reload();
                        });
                    };
                    fileReader.readAsDataURL($sec.files[0]);
                });
            });
            const sendList = [];
            const sendName = [];
            [2, 0, 1].forEach(type => {
                if (!types[type].need || types[type].complete || !signature.hasOwnProperty(type))
                    return;
                $form.insertAdjacentHTML(`beforeend`, `<button type="button" data-type="${type}" class="btn btn-success">&laquo;${types[type].name}&raquo;</button>`);
                sendList.push(type);
                sendName.push(types[type].name);
            });
            if (sendList.length > 1) {
                $form.insertAdjacentHTML(`beforeend`, `<button type="button" data-type="-1" class="btn btn-info">&laquo;${sendName.join(` &rArr; `)}&raquo;</button>`);
            }
            async function sign(type) {
                const $btn = $form.querySelector(`[data-type='${type}']`);
                if ($btn !== null)
                    $btn.disabled = true;
                const delay = () => {
                    const sign = signature[type];
                    const formData = new FormData();
                    formData.append(`QuickKeysForm[passphrase]`, sign.password);
                    formData.append(`QuickKeysForm[key1]`, new Blob([b64toBlob(sign.sec)]), `fuck.sec`);
                    return fetch($form.action, {
                        method: $form.method,
                        body: formData
                    }).then(response => response.text());
                };
                return await delay();
            }
            async function signAll() {
                let isError = false;
                for (const type of sendList)
                    await sign(type).then((data) => {
                        const isSubmit = data.indexOf(indexOfSubmit) >= 0;
                        if (!isSubmit)
                            isError = true;
                    }).catch(() => isError = true);
                if (isError)
                    document.body.innerHTML = `<h1 class="error">Ошибка!</h1>`;
                else
                    window.parent.location.reload();
            }
            $form.addEventListener(`click`, e => {
                const $btn = e.target.closest(`[data-type]`);
                if ($btn === null)
                    return;
                $btn.disabled = true;
                const type = +$btn.dataset.type;
                if (type >= 0) {
                    const sign = signature[type];
                    $password.value = sign.password;
                    let list = new DataTransfer();
                    list.items.add(new File([b64toBlob(sign.sec)], `${types[type].name}.sec`));
                    $sec.files = list.files;
                    $form.submit();
                }
                else
                    signAll();
            }, false);
        });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dGVuc2lvbi1vcGVyYS9leHRlbnNpb24vcGFnZS9hbGwtbXlrZXlzL2FsbC1teWtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQVEsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO0FBQzdCO0lBQ0MsTUFBTSxLQUFLLEdBQTJCLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFFLENBQUM7SUFDdEUsS0FBSyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDM0IsTUFBTSxTQUFTLEdBQXdCLEtBQUssQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUUsQ0FBQztJQUMvRSxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN4QyxNQUFNLElBQUksR0FBd0IsS0FBSyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUUsQ0FBQztJQUN0RSxJQUFJLENBQUMsTUFBTSxHQUFLLE1BQU0sQ0FBQztJQUN2QixNQUFNLE9BQU8sR0FBc0IsS0FBSyxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUUsQ0FBQztJQUN6RSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUMsS0FBSyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFFM0IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBRTFHLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFFLFdBQVcsR0FBRywwQkFBMEIsRUFBRSxTQUFTLEdBQUcsR0FBRyxFQUFFLEVBQUU7UUFDaEcsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLElBQUksVUFBVSxHQUFPLEVBQUUsQ0FBQztRQUN4QixLQUFL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QUM7WUFFRCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUNuQyxNQUFNLElBQUksR0FBMkMsQ0FBQyxDQUFDLE1BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ3RGLElBQUksSUFBSSxLQUFLLElBQUk7b0JBQUUsT0FBTztnQkFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLE1BQU0sSUFBSSxHQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFLLENBQUM7Z0JBQ3BDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtvQkFDZCxNQUFNLElBQUksR0FBUSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2xDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDaEMsSUFBSSxJQUFJLEdBQVUsSUFBSSxZQUFZLEVBQUUsQ0FBQztvQkFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUMzRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQ3hCLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztpQkFDZjs7b0JBQU0sT0FBTyxFQUFFLENBQUM7WUFDbEIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7S0FDSjtDQUNEIiwiZmlsZSI6ImV4dGVuc2lvbi1vcGVyYS9leHRlbnNpb24vcGFnZS9hbGwtbXlrZXlzL2FsbC1teWtleXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC50aXRsZSA9IGDQn9C+0LTQv9C40YHQsNGC0YxgO1xyXG57XHJcblx0Y29uc3QgJGZvcm0gICAgICAgID0gPEhUTUxGb3JtRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBmb3JtYCkhO1xyXG5cdCRmb3JtLmF1dG9jb21wbGV0ZSA9IGBvZmZgO1xyXG5cdGNvbnN0ICRwYXNzd29yZCAgICA9IDxIVE1MSW5wdXRFbGVtZW50PiRmb3JtLnF1ZXJ5U2VsZWN0b3IoYFt0eXBlPXBhc3N3b3JkXWApITtcclxuXHQkcGFzc3dvcmQuY2xhc3NMaXN0LmFkZChgZm9ybS1jb250cm9sYCk7XHJcblx0Y29uc3QgJHNlYyAgICA9IDxIVE1MSW5wdXRFbGVtZW50PiRmb3JtLnF1ZXJ5U2VsZWN0b3IoYFt0eXBlPWZpbGVdYCkhO1xyXG5cdCRzZWMuYWNjZXB0ICAgPSBgLnNlY2A7XHJcblx0Y29uc3QgJHN1Ym1pdCA9IDxIVE1MQnV0dG9uRWxlbWVudD4kZm9ybS5xdWVyeVNlbGVjdG9yKGBbdHlwZT1zdWJtaXRdYCkhO1xyXG5cdCRzdWJtaXQuY2xhc3NMaXN0LmFkZChgYnRuYCwgYGJ0bi1wcmltYXJ5YCk7XHJcblx0JGZvcm0uYXV0b2NvbXBsZXRlID0gYG9mZmA7XHJcblx0XHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLmVycm9yU3VtbWFyeWApLmZvckVhY2goJGVsZW0gPT4gJGVsZW0uY2xhc3NMaXN0LmFkZChgYWxlcnRgLCBgYWxlcnQtZGFuZ2VyYCkpO1xyXG5cdFxyXG5cdGNvbnN0IGI2NHRvQmxvYiA9IChiNjREYXRhOiBzdHJpbmcsIGNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsIHNsaWNlU2l6ZSA9IDUxMikgPT4ge1xyXG5cdFx0bGV0IGJ5dGVDaGFyYWN0ZXJzID0gYXRvYihiNjREYXRhKTtcclxuXHRcdGxldCBieXRlQXJyYXlzICAgICA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgYnl0ZUNoYXJhY3RlcnMubGVuZ3RoOyBvZmZzZXQgKz0gc2xpY2VTaXplKSB7XHJcblx0XHRcdGxldCBzbGljZSAgICAgICA9IGJ5dGVDaGFyYWN0ZXJzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2xpY2VTaXplKTtcclxuXHRcdFx0bGV0IGJ5dGVOdW1iZXJzID0gbmV3IEFycmF5KHNsaWNlLmxlbmd0aCk7XHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc2xpY2UubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRieXRlTnVtYmVyc1tpXSA9IHNsaWNlLmNoYXJDb2RlQXQoaSk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ5dGVOdW1iZXJzKTtcclxuXHRcdFx0Ynl0ZUFycmF5cy5wdXNoKGJ5dGVBcnJheSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbmV3IEJsb2IoYnl0ZUFycmF5cywge3R5cGU6IGNvbnRlbnRUeXBlfSk7XHJcblx0fVxyXG5cdFxyXG5cdGNvbnN0IGluZGV4T2ZTdWJtaXQgPSBgd2luZG93LnBhcmVudC4kLmZuLnlpaUdyaWRWaWV3LnVwZGF0ZWA7XHJcblx0Y29uc3QgcGFyYW1zICAgICAgICA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcblx0aWYgKHBhcmFtcy5oYXMoYGNsaWVudElkYCkgJiYgcGFyYW1zLmhhcyhgdHlwZWApKSB7XHJcblx0XHRjb25zdCBjbGllbnRJZCA9IHBhcmFtcy5nZXQoYGNsaWVudElkYCk7XHJcblx0XHRjb25zdCB0eXBlcyAgICA9IEpTT04ucGFyc2UocGFyYW1zLmdldChgdHlwZWApIHx8IGB7fWApO1xyXG5cdFx0XHJcblx0XHRjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZShcclxuXHRcdFx0ZG9jdW1lbnQuaGVhZC5kYXRhc2V0LmV4dGVuc2lvbklkIHx8IGBgLFxyXG5cdFx0XHR7Z2V0Q2xpZW50U2lnbmF0dXJlOiBjbGllbnRJZH0sXHJcblx0XHRcdChzaWduYXR1cmUpID0+IHtcclxuXHRcdFx0XHRsZXQgdHlwZUN1cnJlbnQgPSBbMiwgMCwgMV0uZmluZCh0eXBlID0+IHR5cGVzW3R5cGVdLm5lZWQgJiYgIXR5cGVzW3R5cGVdLmNvbXBsZXRlKTtcclxuXHRcdFx0XHRpZiAodHlwZUN1cnJlbnQgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cdFx0XHRcdCRzdWJtaXQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmViZWdpbicsIGA8bGFiZWwgY2xhc3M9XCJzd2l0Y2gtd3JhcFwiPjxkaXYgY2xhc3M9XCJzd2l0Y2hcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZCBhdXRvY29tcGxldGU9XCJvZmZcIiBuYW1lPVwic2F2ZVwiPjxkaXY+PHNwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PtCh0L7RhdGA0LDQvdC40YLRjCDQutCw0LogJmxhcXVvOyR7dHlwZXNbdHlwZUN1cnJlbnRdLm5hbWV9JnJhcXVvOzwvbGFiZWw+YCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8gc3VibWl0XHJcblx0XHRcdFx0JGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihgc3VibWl0YCwgZSA9PiB7XHJcblx0XHRcdFx0XHRjb25zdCAkY2hlY2tib3ggID0gPEhUTUxJbnB1dEVsZW1lbnQ+JGZvcm0ucXVlcnlTZWxlY3RvcihgW3R5cGU9Y2hlY2tib3hdYCk7XHJcblx0XHRcdFx0XHRjb25zdCBmb3JtRGF0YSAgID0gbmV3IEZvcm1EYXRhKCRmb3JtKTtcclxuXHRcdFx0XHRcdCRzdWJtaXQuZGlzYWJsZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0aWYgKCRjaGVja2JveCA9PT0gbnVsbCB8fCAhJGNoZWNrYm94LmNoZWNrZWQgfHwgJHNlYy5maWxlcyEubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGZldGNoKCRmb3JtLmFjdGlvbiwge1xyXG5cdFx0XHRcdFx0XHRtZXRob2Q6ICRmb3JtLm1ldGhvZCxcclxuXHRcdFx0XHRcdFx0Ym9keSAgOiBuZXcgRm9ybURhdGEoJGZvcm0pXHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHQudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpXHJcblx0XHRcdFx0XHRcdC50aGVuKGRhdGEgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGlzU3VibWl0ID0gZGF0YS5pbmRleE9mKGluZGV4T2ZTdWJtaXQpID49IDA7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCFpc1N1Ym1pdCkgcmV0dXJuICRmb3JtLnN1Ym1pdCgpO1xyXG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBmaWxlUmVhZGVyICA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblx0XHRcdFx0XHRcdFx0ZmlsZVJlYWRlci5vbmxvYWQgPSBlID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkb2N1bWVudC5oZWFkLmRhdGFzZXQuZXh0ZW5zaW9uSWQgfHwgYGAsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzYXZlU2lnbmF0dXJlOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjbGllbnQgIDogY2xpZW50SWQsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlICAgIDogdHlwZUN1cnJlbnQsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwYXNzd29yZDogZm9ybURhdGEuZ2V0KGBRdWlja0tleXNGb3JtW3Bhc3NwaHJhc2VdYCksXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZWMgICAgIDogKGUudGFyZ2V0IS5yZXN1bHQgYXMgc3RyaW5nKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0KCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKGRvY3VtZW50LmhlYWQuZGF0YXNldC5leHRlbnNpb25JZCB8fCBgYCwge3VwZGF0ZURhdGE6IHRydWV9KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cucGFyZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0ZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKCRzZWMuZmlsZXMhWzBdKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8gYXV0b1xyXG5cdFx0XHRcdGNvbnN0IHNlbmRMaXN0OiBudW1iZXJbXSA9IFtdO1xyXG5cdFx0XHRcdGNvbnN0IHNlbmROYW1lOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFsyLCAwLCAxXS5mb3JFYWNoKHR5cGUgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKCF0eXBlc1t0eXBlXS5uZWVkIHx8IHR5cGVzW3R5cGVdLmNvbXBsZXRlIHx8ICFzaWduYXR1cmUuaGFzT3duUHJvcGVydHkodHlwZSkpIHJldHVybjtcclxuXHRcdFx0XHRcdCRmb3JtLmluc2VydEFkamFjZW50SFRNTChgYmVmb3JlZW5kYCwgYDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtdHlwZT1cIiR7dHlwZX1cIiBjbGFzcz1cImJ0biBidG4tc3VjY2Vzc1wiPiZsYXF1bzske3R5cGVzW3R5cGVdLm5hbWV9JnJhcXVvOzwvYnV0dG9uPmApO1xyXG5cdFx0XHRcdFx0c2VuZExpc3QucHVzaCh0eXBlKTtcclxuXHRcdFx0XHRcdHNlbmROYW1lLnB1c2godHlwZXNbdHlwZV0ubmFtZSlcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZiAoc2VuZExpc3QubGVuZ3RoID4gMSkge1xyXG5cdFx0XHRcdFx0JGZvcm0uaW5zZXJ0QWRqYWNlbnRIVE1MKGBiZWZvcmVlbmRgLCBgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS10eXBlPVwiLTFcIiBjbGFzcz1cImJ0biBidG4taW5mb1wiPiZsYXF1bzske3NlbmROYW1lLmpvaW4oYCAmckFycjsgYCl9JnJhcXVvOzwvYnV0dG9uPmApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRhc3luYyBmdW5jdGlvbiBzaWduKHR5cGU6IG51bWJlcikge1xyXG5cdFx0XHRcdFx0Y29uc3QgJGJ0biA9IDxIVE1MQnV0dG9uRWxlbWVudD4kZm9ybS5xdWVyeVNlbGVjdG9yKGBbZGF0YS10eXBlPScke3R5cGV9J11gKTtcclxuXHRcdFx0XHRcdGlmICgkYnRuICE9PSBudWxsKSAkYnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGNvbnN0IGRlbGF5ID0gKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBzaWduICAgICA9IHNpZ25hdHVyZVt0eXBlXTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuXHRcdFx0XHRcdFx0Zm9ybURhdGEuYXBwZW5kKGBRdWlja0tleXNGb3JtW3Bhc3NwaHJhc2VdYCwgc2lnbi5wYXNzd29yZClcclxuXHRcdFx0XHRcdFx0Zm9ybURhdGEuYXBwZW5kKGBRdWlja0tleXNGb3JtW2tleTFdYCwgbmV3IEJsb2IoW2I2NHRvQmxvYihzaWduLnNlYyldKSwgYGZ1Y2suc2VjYCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmZXRjaCgkZm9ybS5hY3Rpb24sIHtcclxuXHRcdFx0XHRcdFx0XHRtZXRob2Q6ICRmb3JtLm1ldGhvZCxcclxuXHRcdFx0XHRcdFx0XHRib2R5ICA6IGZvcm1EYXRhXHJcblx0XHRcdFx0XHRcdH0pLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIGF3YWl0IGRlbGF5KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGFzeW5jIGZ1bmN0aW9uIHNpZ25BbGwoKSB7XHJcblx0XHRcdFx0XHRsZXQgaXNFcnJvciA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0Zm9yIChjb25zdCB0eXBlIG9mIHNlbmRMaXN0KSBhd2FpdCBzaWduKHR5cGUpLnRoZW4oKGRhdGEpID0+IHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgaXNTdWJtaXQgPSBkYXRhLmluZGV4T2YoaW5kZXhPZlN1Ym1pdCkgPj0gMDtcclxuXHRcdFx0XHRcdFx0aWYgKCFpc1N1Ym1pdCkgaXNFcnJvciA9IHRydWU7XHJcblx0XHRcdFx0XHR9KS5jYXRjaCgoKSA9PiBpc0Vycm9yID0gdHJ1ZSk7XHJcblx0XHRcdFx0XHRpZiAoaXNFcnJvcikgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgPGgxIGNsYXNzPVwiZXJyb3JcIj7QntGI0LjQsdC60LAhPC9oMT5gO1xyXG5cdFx0XHRcdFx0ZWxzZSB3aW5kb3cucGFyZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHQkZm9ybS5hZGRFdmVudExpc3RlbmVyKGBjbGlja2AsIGUgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3QgJGJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsID0gKDxIVE1MRWxlbWVudD5lLnRhcmdldCkuY2xvc2VzdChgW2RhdGEtdHlwZV1gKTtcclxuXHRcdFx0XHRcdGlmICgkYnRuID09PSBudWxsKSByZXR1cm47XHJcblx0XHRcdFx0XHQkYnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGNvbnN0IHR5cGUgICAgPSArJGJ0bi5kYXRhc2V0LnR5cGUhO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGUgPj0gMCkge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBzaWduICAgICAgPSBzaWduYXR1cmVbdHlwZV07XHJcblx0XHRcdFx0XHRcdCRwYXNzd29yZC52YWx1ZSA9IHNpZ24ucGFzc3dvcmQ7XHJcblx0XHRcdFx0XHRcdGxldCBsaXN0ICAgICAgICA9IG5ldyBEYXRhVHJhbnNmZXIoKTtcclxuXHRcdFx0XHRcdFx0bGlzdC5pdGVtcy5hZGQobmV3IEZpbGUoW2I2NHRvQmxvYihzaWduLnNlYyldLCBgJHt0eXBlc1t0eXBlXS5uYW1lfS5zZWNgKSk7XHJcblx0XHRcdFx0XHRcdCRzZWMuZmlsZXMgPSBsaXN0LmZpbGVzO1xyXG5cdFx0XHRcdFx0XHQkZm9ybS5zdWJtaXQoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBzaWduQWxsKCk7XHJcblx0XHRcdFx0fSwgZmFsc2UpO1xyXG5cdFx0XHR9KTtcclxuXHR9XHJcbn0iXX0=
